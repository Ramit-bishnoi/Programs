1)  Right angle triangle (*)
  
  #include <stdio.h>
  #define max 5
  
  int main() {
      int i , j ;  
      for (i = 1 ; i <= max ; i ++)
      {
          for (j = 1 ; j <= i ; j++)
          {
              printf("*");
          }
          printf("\n");
      }
  
      return 0;
  }
  output
  *
  **
  ***
  ****
  *****


2)  Right down pyramid 
  
  #include <stdio.h>
  #define max 5
  
  int main() {
      int i , j ;  
      for (i = 1 ; i <= max ; i ++)
      {
          for (j = max ; j >= i ; j--)
          {
              printf("*");
          }
          printf("\n");
      }
  
      return 0;
  }
  output 
  *****
  ****
  ***
  **
  *

3) left half pyramid 
    #include <stdio.h>
    #define max 5
    
    int main() {
        int i , j ;  
        for (i = 0 ; i <= max ; i ++)
        {
            for (j = max ; j >= i ; j--)
            {
                printf(" ");
            }
            for (j = 1 ; j <= i ; j++)
            {
                printf("*");
            }
            printf("\n");
            
        }
        return 0;
    }
    otutput 
         *
        **
       ***
      ****
     *****

4) Inverted Left Half Pyramid 
    #include <stdio.h>
    #define max 5
    
    int main() {
        int i , j ;  
        for (i = 0 ; i <= max ; i ++)
        {
            for (j = 1 ; j <= i ; j++)
            {
                printf(" ");
            }
            
            for (j = max ; j >= i ; j--)
            {
                printf("*");
            }
            printf("\n");
    
            
        }
        return 0;
    }
    output
      ******
       *****
        ****
         ***
          **
           *

5) Full pyramid 
    #include <stdio.h>
    #define max 5
    
    int main() {
        int i , j ;  
        for (i = 0 ; i <= max ; i ++)
        {
            for (j = max ; j >= i ; j--)
            {
                printf(" ");
            }
            for (j = 1 ; j <= i ; j++)
            {
                printf(" *");
            }
            printf("\n");
            
        }
        return 0;
    }
    output 
          *
         * *
        * * *
       * * * *
      * * * * *

6) Inverted Full Pyramid
    #include <stdio.h>
    #define max 5
    
    int main() {
        int i , j ;  
        for (i = 0 ; i <= max ; i ++)
        {
            for (j = 1 ; j <= i ; j++)
            {
                printf(" ");
            }
            
            for (j = max ; j >= i ; j--)
            {
                printf(" *");
            }
            printf("\n");
    
            
        }
        return 0;
    }
    output
     * * * * * *
      * * * * *
       * * * *
        * * *
         * *
          *

7) Rhombus 
    #include <stdio.h>
    #define max 5
    
    int main() {
        int i , j ;  
        for (i = 1 ; i <= max ; i ++)
        {
            for(j = max ; j>=i ; j--)
            {
                printf(" ");
            }
            for(j = 1  ; j<= max ; j++)
            {
                printf("*" );
            }
            printf("\n");
        }
            
        
        return 0;
    }
    output
         *****
        *****
       *****
      *****
     *****
8) diamond 
  #include <stdio.h> 
  int main() 
  { 
  	int n = 5; 
  
  	for (int i = 0; i < 2 * n - 1; i++) { 
  
  		
  		int comp; 
  		if (i < n) { 
  			comp = 2 * (n - i) - 1; 
  		} 
  		else { 
  			comp = 2 * (i - n + 1) + 1; 
  		} 
  
  		for (int j = 0; j < comp; j++) { 
  			printf(" "); 
  		} 
  
  		for (int k = 0; k < 2 * n - comp; k++) { 
  			printf("%d ", k + 1); 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output: 
         1 
       1 2 3 
     1 2 3 4 5 
   1 2 3 4 5 6 7 
 1 2 3 4 5 6 7 8 9 
   1 2 3 4 5 6 7 
     1 2 3 4 5 
       1 2 3 
         1 

9) Hourglass 
  #include <stdio.h> 
  int main() 
  { 
  	int rows = 5; 
  
  	for (int i = 0; i < 2 * rows - 1; i++) { 
  
  		int comp; 
  		if (i < rows) { 
  			comp = 2 * i + 1; 
  		} 
  		else { 
  			comp = 2 * (2 * rows - i) - 3; 
  		} 
  
  		for (int j = 0; j < comp; j++) { 
  			printf(" "); 
  		} 
  
  		for (int k = 0; k < 2 * rows - comp; k++) { 
  			printf("%d ", k + 1); 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output :
   1 2 3 4 5 6 7 8 9 
     1 2 3 4 5 6 7 
       1 2 3 4 5 
         1 2 3 
           1 
         1 2 3 
       1 2 3 4 5 
     1 2 3 4 5 6 7 
   1 2 3 4 5 6 7 8 9 

10) Hollow square
  #include <stdio.h> 
  
  int main() 
  { 
  	int rows = 5; 
  
  	for (int i = 0; i < rows; i++) { 
  
  		for (int j = 0; j < rows; j++) { 
  			if (i > 0 && i < rows - 1 && j > 0 
  				&& j < rows - 1) { 
  				printf(" "); 
  			} 
  			else { 
  				printf("%d ", j + 1); 
  			} 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output :
  1 2 3 4 5 
  1    5 
  1    5 
  1    5 
  1 2 3 4 5

11) Hollow pyramid
  #include <stdio.h> 
  
  int main() 
  { 
  	int rows = 5; 
  
  	for (int i = 0; i < rows; i++) { 
  
  		for (int j = 0; j < 2 * (rows - i) - 1; j++) { 
  			printf(" "); 
  		} 
  
  		for (int k = 0; k < 2 * i + 1; k++) { 
  			if (k == 0 || k == 2 * i || i == rows - 1) { 
  				printf("%d ", k + 1); 
  			} 
  			else { 
  				printf(" "); 
  			} 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }

output :
          1          
        1   3        
      1       5       
    1           7     
  1 2 3 4 5 6 7 8 9 

12)inverted hollow pramid

  #include <stdio.h> 
  
  int main() 
  { 
  	int rows = 5; 
  
  	for (int i = 0; i < rows; i++) { 
  
  		for (int j = 0; j < 2 * i + 1; j++) { 
  			printf(" "); 
  		} 
   
  		for (int k = 0; k < 2 * (rows - i) - 1; k++) { 
  			if (k == 0 || k == 2 * (rows - i) - 2 || i == 0) 
  				printf("%d ", k + 1); 
  			else { 
  				printf(" "); 
  			} 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output :
 1 2 3 4 5 6 7 8 9 
   1           7 
     1       5 
       1   3 
         1 

13)hollow diamond 
 
  #include <stdio.h> 
  int main() 
  { 
  	int n = 5; 
  
  	for (int i = 0; i < 2 * n - 1; i++) { 
  
  		int comp; 
  		if (i < n) { 
  			comp = 2 * (n - i) - 1; 
  		} 
  		else { 
  			comp = 2 * (i - n + 1) + 1; 
  		} 
  
      for (int j = 0; j < comp; j++) { 
  			printf(" "); 
  		} 
  
  		for (int k = 0; k < 2 * n - comp; k++) { 
  			if (k == 0 || k == 2 * n - comp - 1) { 
  				printf("%c ", k + 'A'); 
  			} 
  			else { 
  				printf(" "); 
  			} 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output : 
         1 
       1    3 
     1        5 
   1             7 
 1                9 
   1            7 
     1        5 
       1    3 
         1 

14)hollow hourglass
  #include <stdio.h> 
  int main() 
  { 
  	int n = 5; 
  
  	for (int i = 0; i < 2 * n - 1; i++) { 
  
  		int comp; 
  		if (i < n) { 
  			comp = 2 * i + 1; 
  		} 
  		else { 
  			comp = 2 * (2 * n - i) - 3; 
  		} 
  
  		for (int j = 0; j < comp; j++) { 
  			printf(" "); 
  		} 
  
  	
  		for (int k = 0; k < 2 * n - comp; k++) { 
  			if (k == 0 || k == 2 * n - comp - 1 || i == 0 
  				|| i == 2 * n - 2) { 
  				printf("%d ", k + 1); 
  			} 
  			else { 
  				printf(" "); 
  			} 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output : 
 1 2 3 4 5 6 7 8 9 
   1           7 
     1       5 
       1   3 
         1 
       1   3 
     1       5 
   1           7 
 1 2 3 4 5 6 7 8 9 

15)Floyd triangle
  #include <stdio.h> 
  
  int main() 
  { 
  	int rows = 4; 
  	char n = 'A'; 
  
  	for (int i = 0; i < rows; i++) { 
  
  		for (int j = 0; j <= i; j++) { 
  			printf("%c ", n++); 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output :
      A 
      B C 
      D E F 
      G H I J 

16) pascal triangle 
  #include <stdio.h> 
  
  int main() 
  { 
  	int rows = 5; 
  
  	for (int i = 1; i <= rows; i++) { 
  
  		for (int j = 0; j < rows - i; j++) { 
  			printf(" "); 
  		} 
  
  		int C = 1;  
  
  		for (int k = 1; k <= i; k++) { 
  			printf("%d ", C); 
  			C = C * (i - k) / k; 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output:
      1 
     1 1 
    1 2 1 
   1 3 3 1 
  1 4 6 4 1 

  
