1)Sum of Two Numbers:
  #include <stdio.h>
  int main() {
      int a = 5, b = 7;
      int sum = a + b;
      printf("Sum of %d and %d is %d\n", a, b, sum);
      return 0;
  }

2)Fibonacci Series:
  #include <stdio.h>
  int main() {
      int n = 10, t1 = 0, t2 = 1, nextTerm;
      printf("Fibonacci Series: ");
      for (int i = 1; i <= n; ++i) {
          printf("%d, ", t1);
          nextTerm = t1 + t2;
          t1 = t2;
          t2 = nextTerm;
      }
      return 0;
  }
3) Factorial 
  #include <stdio.h>
  int main() {
      int n, fact = 1;
      printf("Enter a positive integer: ");
      scanf("%d", &n);
      for (int i = 1; i <= n; i++) {
          fact *= i;
      }
      printf("Factorial: %d\n", fact);
      return 0;
  }
4)palindrome
  #include <stdio.h>
  #include <stdbool.h>
  #include <string.h>
  bool isPalindrome(char *str) {
      int len = strlen(str);
      for (int i = 0; i < len / 2; i++) {
          if (str[i] != str[len - i - 1]) {
              return false;
          }
      }
      return true;
  } int main() {
      char str[100];
      printf("Enter a string: ");
      scanf("%s", str);
      if (isPalindrome(str)) {
          printf("Palindrome\n");
      } else {
          printf("Not a Palindrome\n");
      }
      return 0;
  }
5) sum of array elements 
  #include <stdio.h>
  int main() {
      int n, sum = 0;
      printf("Enter the number of elements: ");
      scanf("%d", &n);
      int arr[n];
      printf("Enter %d elements: ", n);
      for (int i = 0; i < n; i++) {
          scanf("%d", &arr[i]);
          sum += arr[i];
      }
      printf("Sum: %d\n", sum);
      return 0;
  }
  swap two numbers #include <stdio.h>
  int main() {
      int a, b, temp;
      printf("Enter two numbers: ");
      scanf("%d %d", &a, &b);
      temp = a;
      a = b;
      b = temp;
      printf("Swapped Numbers: %d %d\n", a, b);
      return 0;
  }
6)prime number 
  #include <stdio.h>
  #include <stdbool.h>
  int isPrime(int num) {
      if (num <= 1)
          return false;
      for (int i = 2; i * i <= num; i++) {
          if (num % i == 0)
              return false;
      }
      return true;
  }
  int main() {
      int num;
      printf("Enter a positive integer: ");
      scanf("%d", &num);
      if (isPrime(num)) {
          printf("Prime\n");
      } else {
          printf("Not Prime\n");
      }
      return 0;
  }

7) Find ASCII Value
  #include<stdio.h>
  
  int main()
  {
  
      char c;
      printf("Enter a character : ");
      scanf("%c" , &c);
      printf("\n\nASCII value of %c = %d",c,c);
  
      printf("\n\n\ti am Ramit\n\n\n");
      return 0;
  }

8)  Basic if - else 
  #include<stdio.h>
  
  int main()
  {
  
      int number;
      printf("Please enter a number:\n");
      scanf("%d",&number);
    
      if(number < 100)
          printf("Number is less than 100!\n");
      else if(number == 100)
          printf("Number is 100!\n");
      else
          printf("Number is greater than 100!\n");
  
      
      printf("\n\n\ti am Ramit\n\n\n");
      return 0;
  }

9)Switch  case with break
  #include<stdio.h>
  
  int main()
  {
  
      // Local Variable Definition
      char grade;
      printf("Enter your grade:\n");
      scanf("%c", &grade);
  
      switch(grade)
      {
          case 'A':
              printf("Excellent\n");
              break;
          case 'B':
              printf("Keep it up!\n\n");
              break;
          case 'C':
              printf("Well done\nbreak keyword takes execution to exit the switch case\n\n");
              break;
          case 'D':
              printf("You passed\n");
              break;
          case 'F':
              printf("Better luck next time\n");
              break;
          default:
              printf("Invalid grade\n");
      }
      printf("Your grade is %c\n",grade);
      printf("\n\n\ti am ramit \n\n\n");
      return 0;
  }

10 )switch case without break
  #include<stdio.h>
  
  int main()
  {
  
      /* Local Variable Definition */
      char grade;
      printf("Enter your grade:\n");
      scanf("%c", &grade);
  
      switch(grade)
      {
          case 'A':
              printf("Excellent\n");
          case 'B':
              printf("\n\n\nKeep it up!\n\nNo break statement\n\nHence all the case following this(but not the ones above this) except the default case will get executed !\n\n");
          case 'C':
              printf("\n\n\t\tCase C : Well done !\n\n");
          case 'D':
              printf("\t\tCase D : You passed!\n\n");
          case 'F':
              printf("\t\tCase E : Better luck next time\n\n\n");
          default:
              printf("\t\tDefault Case : Invalid grade\n\n\n");
      }
      printf("Your grade is %c\n",grade);
      printf("\n\n\ti am ramit\n\n");
      return 0;
  }

11)switch case without default 
  #include<stdio.h>

  int main()
  {  
    int x = 4;
    switch (x) {
        case 1:
            printf("Choice is 1");
            break;
        case 2:
            printf("Choice is 2");
            break;
        case 3:
            printf("Choice is 3");
            break;
        }
  }

12) Vowel or not using switch case
  #include<stdio.h>
  
  int main()
  {
  
      char ch;
      printf("Input a Character :  ");
      scanf("%c", &ch);
  
      switch(ch)
      {
          case 'a':
          case 'A':
          case 'e':
          case 'E':
          case 'i':
          case 'I':
          case 'o':
          case 'O':
          case 'u':
          case 'U':
              printf("\n\n%c is a vowel.\n\n", ch);
              break;
          default:
              printf("%c is not a vowel.\n\n", ch);
      }
      printf("\n\n\ti am ramitn\n");
      return 0;
  }

13)upper to lower or lower to upper 
  #include<stdio.h>
  #include<ctype.h> // to use system defined function islower & toupper
  
  int main()
  {
  
      char alphabet;
      printf("Enter an alphabet : ");
      putchar('\n');  
  
      alphabet=getchar();
  
      printf("\n\nReverse case of %c is :  ",alphabet);
  
      if(islower(alphabet))
          putchar(toupper(alphabet));
  
      else 
          // must be an uppercase character
          printf("%c",tolower(alphabet)) ;
  
      printf("\n\n\ti am ramit \n\n");
      return 0;
  }

14)Swapping two variable values using a Temporary Variable
  #include<stdio.h>
  #include<conio.h>
  
  void main()
  {
      int x = 10, y = 15, temp;
      temp = x;
      x = y;
      y = temp;
      printf("x = %d and y = %d", x, y);
      getch();
      printf("\n\n\ti am ramit\n\n");
  }

15)Swapping two variable values using Addition and Subtraction
  #include<stdio.h>
  #include<conio.h>
  
  void main()
  {
      int x = 10, y = 15;
      x = x + y - (y = x);
      printf("x = %d and y = %d",x,y);
      getch();
      printf("\n\n\ti am ramit\n\n");
  }

16)Swapping two variable values using Bitwise Operator
  #include<stdio.h>
  #include<conio.h>
  
  void main()
  {
      int x = 6, y = 4;
      x = x^y;
      y = x^y;
      x = x^y;
      printf("x = %d and y = %d", x, y);
      getch();
      printf("\n\n\ti am ramit\n\n");
  }

17)Swapping two variable values using Multiplication and Division
  #include<stdio.h>
  #include<conio.h>
  
  void main()
  {
      int x = 6, y = 4;
      x = x*y;
      y = x/y;
      x = x/y;
      printf("x = %d and y = %d", x, y);
      getch();
      printf("\n\n\ti am ramit\n\n");
  }


18) find largest and smallest value using global declaration
  #include<stdio.h>
  
  int a,b;
  int main()
  {
      printf("\n\nEnter the two values to find the greatest and smallest number: \n");
      scanf("%d%d", &a, &b);
  
      if(a == b)
          printf("Both are equal\n");
          
      else if(a < b)
      {
          printf("\n\nThe largest number is %03d\n", b);
          printf("\nThe smallest number is %03d\n", a);
          printf("\nThe largest number is %03d\n", b);
      }
      else   
      {
          printf("The largest number is %03d\n", a);
          printf("The smallest number is %03d\n", b);
      }
      printf("\n\n\ti am ramit\n\n");
      return 0;
  }

19) basic for loop 
  #include<stdio.h>
  
  int main()
  {
  
      int i = 0; 
  
  
      for(i = 0; i < 10; i++)
      {
          printf("i = %d\n", i);
       }
  
      printf("\n\The value of i after exiting the loop is %d\n\n", i);
      return 0;
  }

20)  Right angle triangle (*)
  
  #include <stdio.h>
  #define max 5
  
  int main() {
      int i , j ;  
      for (i = 1 ; i <= max ; i ++)
      {
          for (j = 1 ; j <= i ; j++)
          {
              printf("*");
          }
          printf("\n");
      }
  
      return 0;
  }
  output
  *
  **
  ***
  ****
  *****


21)  Right down pyramid 
  
  #include <stdio.h>
  #define max 5
  
  int main() {
      int i , j ;  
      for (i = 1 ; i <= max ; i ++)
      {
          for (j = max ; j >= i ; j--)
          {
              printf("*");
          }
          printf("\n");
      }
  
      return 0;
  }
  output 
  *****
  ****
  ***
  **
  *

22) left half pyramid 
    #include <stdio.h>
    #define max 5
    
    int main() {
        int i , j ;  
        for (i = 0 ; i <= max ; i ++)
        {
            for (j = max ; j >= i ; j--)
            {
                printf(" ");
            }
            for (j = 1 ; j <= i ; j++)
            {
                printf("*");
            }
            printf("\n");
            
        }
        return 0;
    }
    otutput 
         *
        **
       ***
      ****
     *****

23) Inverted Left Half Pyramid 
    #include <stdio.h>
    #define max 5
    
    int main() {
        int i , j ;  
        for (i = 0 ; i <= max ; i ++)
        {
            for (j = 1 ; j <= i ; j++)
            {
                printf(" ");
            }
            
            for (j = max ; j >= i ; j--)
            {
                printf("*");
            }
            printf("\n");
    
            
        }
        return 0;
    }
    output
      ******
       *****
        ****
         ***
          **
           *

24) Full pyramid 
    #include <stdio.h>
    #define max 5
    
    int main() {
        int i , j ;  
        for (i = 0 ; i <= max ; i ++)
        {
            for (j = max ; j >= i ; j--)
            {
                printf(" ");
            }
            for (j = 1 ; j <= i ; j++)
            {
                printf(" *");
            }
            printf("\n");
            
        }
        return 0;
    }
    output 
          *
         * *
        * * *
       * * * *
      * * * * *

25) Inverted Full Pyramid
    #include <stdio.h>
    #define max 5
    
    int main() {
        int i , j ;  
        for (i = 0 ; i <= max ; i ++)
        {
            for (j = 1 ; j <= i ; j++)
            {
                printf(" ");
            }
            
            for (j = max ; j >= i ; j--)
            {
                printf(" *");
            }
            printf("\n");
    
            
        }
        return 0;
    }
    output
     * * * * * *
      * * * * *
       * * * *
        * * *
         * *
          *

26) Rhombus 
    #include <stdio.h>
    #define max 5
    
    int main() {
        int i , j ;  
        for (i = 1 ; i <= max ; i ++)
        {
            for(j = max ; j>=i ; j--)
            {
                printf(" ");
            }
            for(j = 1  ; j<= max ; j++)
            {
                printf("*" );
            }
            printf("\n");
        }
            
        
        return 0;
    }
    output
         *****
        *****
       *****
      *****
     *****
27) diamond 
  #include <stdio.h> 
  int main() 
  { 
  	int n = 5; 
  
  	for (int i = 0; i < 2 * n - 1; i++) { 
  
  		
  		int comp; 
  		if (i < n) { 
  			comp = 2 * (n - i) - 1; 
  		} 
  		else { 
  			comp = 2 * (i - n + 1) + 1; 
  		} 
  
  		for (int j = 0; j < comp; j++) { 
  			printf(" "); 
  		} 
  
  		for (int k = 0; k < 2 * n - comp; k++) { 
  			printf("%d ", k + 1); 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output: 
         1 
       1 2 3 
     1 2 3 4 5 
   1 2 3 4 5 6 7 
 1 2 3 4 5 6 7 8 9 
   1 2 3 4 5 6 7 
     1 2 3 4 5 
       1 2 3 
         1 

28) Hourglass 
  #include <stdio.h> 
  int main() 
  { 
  	int rows = 5; 
  
  	for (int i = 0; i < 2 * rows - 1; i++) { 
  
  		int comp; 
  		if (i < rows) { 
  			comp = 2 * i + 1; 
  		} 
  		else { 
  			comp = 2 * (2 * rows - i) - 3; 
  		} 
  
  		for (int j = 0; j < comp; j++) { 
  			printf(" "); 
  		} 
  
  		for (int k = 0; k < 2 * rows - comp; k++) { 
  			printf("%d ", k + 1); 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output :
   1 2 3 4 5 6 7 8 9 
     1 2 3 4 5 6 7 
       1 2 3 4 5 
         1 2 3 
           1 
         1 2 3 
       1 2 3 4 5 
     1 2 3 4 5 6 7 
   1 2 3 4 5 6 7 8 9 

29) Hollow square
  #include <stdio.h> 
  
  int main() 
  { 
  	int rows = 5; 
  
  	for (int i = 0; i < rows; i++) { 
  
  		for (int j = 0; j < rows; j++) { 
  			if (i > 0 && i < rows - 1 && j > 0 
  				&& j < rows - 1) { 
  				printf(" "); 
  			} 
  			else { 
  				printf("%d ", j + 1); 
  			} 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output :
  1 2 3 4 5 
  1    5 
  1    5 
  1    5 
  1 2 3 4 5

11) Hollow pyramid
  #include <stdio.h> 
  
  int main() 
  { 
  	int rows = 5; 
  
  	for (int i = 0; i < rows; i++) { 
  
  		for (int j = 0; j < 2 * (rows - i) - 1; j++) { 
  			printf(" "); 
  		} 
  
  		for (int k = 0; k < 2 * i + 1; k++) { 
  			if (k == 0 || k == 2 * i || i == rows - 1) { 
  				printf("%d ", k + 1); 
  			} 
  			else { 
  				printf(" "); 
  			} 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }

output :
          1          
        1   3        
      1       5       
    1           7     
  1 2 3 4 5 6 7 8 9 

30)inverted hollow pramid

  #include <stdio.h> 
  
  int main() 
  { 
  	int rows = 5; 
  
  	for (int i = 0; i < rows; i++) { 
  
  		for (int j = 0; j < 2 * i + 1; j++) { 
  			printf(" "); 
  		} 
   
  		for (int k = 0; k < 2 * (rows - i) - 1; k++) { 
  			if (k == 0 || k == 2 * (rows - i) - 2 || i == 0) 
  				printf("%d ", k + 1); 
  			else { 
  				printf(" "); 
  			} 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output :
 1 2 3 4 5 6 7 8 9 
   1           7 
     1       5 
       1   3 
         1 

31)hollow diamond 
 
  #include <stdio.h> 
  int main() 
  { 
  	int n = 5; 
  
  	for (int i = 0; i < 2 * n - 1; i++) { 
  
  		int comp; 
  		if (i < n) { 
  			comp = 2 * (n - i) - 1; 
  		} 
  		else { 
  			comp = 2 * (i - n + 1) + 1; 
  		} 
  
      for (int j = 0; j < comp; j++) { 
  			printf(" "); 
  		} 
  
  		for (int k = 0; k < 2 * n - comp; k++) { 
  			if (k == 0 || k == 2 * n - comp - 1) { 
  				printf("%c ", k + 'A'); 
  			} 
  			else { 
  				printf(" "); 
  			} 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output : 
         1 
       1    3 
     1        5 
   1             7 
 1                9 
   1            7 
     1        5 
       1    3 
         1 

32)hollow hourglass
  #include <stdio.h> 
  int main() 
  { 
  	int n = 5; 
  
  	for (int i = 0; i < 2 * n - 1; i++) { 
  
  		int comp; 
  		if (i < n) { 
  			comp = 2 * i + 1; 
  		} 
  		else { 
  			comp = 2 * (2 * n - i) - 3; 
  		} 
  
  		for (int j = 0; j < comp; j++) { 
  			printf(" "); 
  		} 
  
  	
  		for (int k = 0; k < 2 * n - comp; k++) { 
  			if (k == 0 || k == 2 * n - comp - 1 || i == 0 
  				|| i == 2 * n - 2) { 
  				printf("%d ", k + 1); 
  			} 
  			else { 
  				printf(" "); 
  			} 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output : 
 1 2 3 4 5 6 7 8 9 
   1           7 
     1       5 
       1   3 
         1 
       1   3 
     1       5 
   1           7 
 1 2 3 4 5 6 7 8 9 

33)Floyd triangle
  #include <stdio.h> 
  
  int main() 
  { 
  	int rows = 4; 
  	char n = 'A'; 
  
  	for (int i = 0; i < rows; i++) { 
  
  		for (int j = 0; j <= i; j++) { 
  			printf("%c ", n++); 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output :
      A 
      B C 
      D E F 
      G H I J 

34) pascal triangle 
  #include <stdio.h> 
  
  int main() 
  { 
  	int rows = 5; 
  
  	for (int i = 1; i <= rows; i++) { 
  
  		for (int j = 0; j < rows - i; j++) { 
  			printf(" "); 
  		} 
  
  		int C = 1;  
  
  		for (int k = 1; k <= i; k++) { 
  			printf("%d ", C); 
  			C = C * (i - k) / k; 
  		} 
  		printf("\n"); 
  	} 
  	return 0; 
  }
output:
      1 
     1 1 
    1 2 1 
   1 3 3 1 
  1 4 6 4 1 


35) while loop 
#include<stdio.h>

int main()
{
  
    int i = 0;  // declaration and initialization at the same time

    printf("\nPrinting numbers using while loop from 0 to 9\n\n");


    while(i<10)
    {
        printf("%d\n",i);

        i++;    // same as i=i+1;
      }
    
    return 0;
}

36)
#include<stdio.h>

int main()
{
    printf("\n\n\t\tStudytonight - Best place to learn\n\n\n");

    int i = 10;     

    {
        printf("i = %d\n",i);
        i = i-1;    // updation
    }
    
    while(i > 0);
    
    printf("\n\The value of i after exiting the loop is %d\n\n", i);
    return 0;
}

37) do while 
    #include<stdio.h>
    
    int main()
    {
    
        
        int i = 10;     
    
        do 
        {
            printf("i = %d\n",i);
            i = i-1;    // updation
        }
        
        while(i > 0);
        
        printf("\n\The value of i after exiting the loop is %d\n\n", i);
        return 0;
    }

38) nested loop 
    #include<stdio.h>
    
    int main()
    {
    
        int i,j,k;
        printf("\n\nOutput of the nested loop is :\n\n");
        for(i = 0; i < 5; i++)
        {
            printf("\t\t\t\t");
            for(j = 0; j < 5; j++)
            printf("* ");
    
            printf("\n");
        }
        return 0;
    }

39)find Factorial of a Number using for loop
    #include<stdio.h>
    void main()
    {
       int i, n;
       long int fact = 1;
       printf("Enter the number: ");
       scanf("%d" , &n);
       for(i = 1; i <= n; i++)
       {
           fact = fact * i;
       }
       printf("Factorial of %d is %ld", n , fact);
    }

40)find Factorial of a Number using while loop
    #include<stdio.h>
    void main()
    {
       int n;
       long int fact = 1;
       printf("Enter the number: ");
       scanf("%d" , &n);
       int i = n;
       while(i) {
           fact = fact * i;
           i--;
       }
       printf("Factorial of %d is %ld", n , fact);
    }

41)Fibonacci Series
    #include<stdio.h>
    #include<conio.h>
    
    void fibonacci(int num);
    void main()
    {
        int num = 0;
        clrscr();
        printf("Enter number of terms\t");
        scanf("%d", &num);
        fibonacci(num);
        getch();
    }
    
    void fibonacci(int num)
    {
       int a, b, c, i = 3;
       a = 0;
       b = 1;
       if(num == 1)
       printf("%d",a);
    
       if(num >= 2)
       printf("%d\t%d",a,b);
    
       while(i <= num)
       {
          c = a+b;
          printf("\t%d", c);
          a = b;
          b = c;
          i++;
       }
    }

42) check whether a Number is a Palindrome
    #include<stdio.h>
    #include<conio.h>
    
    void main()
    {
        int a, b, c, s = 0;
        clrscr();
        printf("Enter a number:\t");
        scanf("%d", &a);
        c = a;
    
       while(a > 0)
       {
          b = a%10;
          s = (s*10)+b;
          a = a/10;
       }
    
       if(s == c)
       {
          printf("The number %d is a palindrome", c);
       }
       else
       {
          printf("The number %d is not a palindrome", c);
       }
      getch();
    }

43) Sum of Digits of a Number
    #include<stdio.h>
    
    int main()
    {
    
    	int n, sum = 0, c, remainder;
    
        	printf("Enter the number you want to add digits of:  ");
        	scanf("%d", &n);
    
    	while(n != 0)
        	{
            	remainder = n%10;
            	sum += remainder;
            	n = n/10;
        	}
    
        	printf("\n\nSum of the digits of the entered number is  =  %d\n\n", sum);
        	return 0;
    }

44)Reverse a String by using the new character array
    #include <stdio.h>
    int main()
    {
      char str[1000], rev[1000];
      int i, j, count = 0;
      scanf("%s", str);
      printf("\nString Before Reverse: %s", str);
      while (str[count] != '\0')
      {
        count++;
      }
      j = count - 1;
    
      for (i = 0; i < count; i++)
      {
        rev[i] = str[j];
        j--;
      }
    
      printf("\nString After Reverse: %s", rev);
    }

45)Reverse a String by swapping the characters of the string
    #include <stdio.h>
    #include <string.h>
    void reverseStr(char str[])
    {
      int n = strlen(str);
    
      for (int i = 0; i < n / 2; i++)
      {
        char ch = str[i];
        str[i] = str[n - i - 1];
        str[n - i - 1] = ch;
      }
    }
    
    int main()
    {
      char str[1000];
      scanf("%s", str);
      printf("\nString Before Reverse: %s", str);
      reverseStr(str);
      printf("\nString After Reverse: %s", str);
      return 0;
    }

46) find average of N Numbers
    #include<stdio.h>
    
    int main()
    {
    
        int n, i;
        float sum = 0, x;
    
        printf("Enter number of elements:  ");
        scanf("%d", &n);
        printf("\n\n\nEnter %d elements\n\n", n);
        for(i = 0; i < n; i++)
        {
            scanf("%f", &x);
            sum += x;
        }
        printf("\n\n\nAverage of the entered numbers is =  %f", (sum/n));
        return 0;
    }

47)find Armstrong Number between 1 to 500
    #include<stdio.h>
    #include<math.h>
    
    int main()
    {
        int n,sum,i,t,a;
        printf("\n\n\nThe Armstrong numbers in between 1 to 500 are : \n\n\n");
    
        for(i = 1; i <= 500; i++)
        {
            t = i;  // as we need to retain the original number
            sum = 0;
            while(t != 0)
            {
                a = t%10;
                sum += a*a*a;
                t = t/10;
            }
    
            if(sum == i)
            printf("\n\t\t%d", i);
        }
    
        return 0;
    }

48) check whether a number is Armstrong Number
#include<stdio.h>
#include<math.h>

int main()
{

    int n, sum = 0, c, t, a;

    printf("Enter a number:  ");
    scanf("%d", &n);

    t = n;  // as need to retain the original number
    while(n != 0)
    {
        a = n%10;
        sum += a*a*a;
        n = n/10;
    }

    printf("\n\n\n\t\t\tsum = %d", sum);

    if(sum == t)
        printf("\n\n\t\t%d is an armstrong number\n", t);
    else
        printf("\n\n\t\t%d is not an armstrong number\n", t);

    return 0;
}

49) find Factors of a Number
    #include<stdio.h>
    
    int main()
    {
        int  num, i;
        printf("Enter the number to find the factors of :  ");
        scanf("%d",&num);
        printf("\n\n\nFactors of %d are \n\n", num);
    
        for(i = 1; i <= num/2; i++)
        {
            if(num%i == 0)
                printf("\t\t%d\n", i);
        }
    
        return 0;
    }
50)Sum of N input Numbers
    #include<stdio.h>
    
    int main()
    {
        int n,sum=0,c,value;
    
        printf("\n\nEnter the number of integers you want to add:  ");
        scanf("%d", &n);
    
        printf("Enter %d integers\n\n",n);
        for(c = 1; c <= n; c++)
        {
            scanf("%d", &value);
            
            sum += value;
        }
    
        printf("\n\n\nsum of entered numbers  = %d", sum);
        return 0;
    }

61)find first N Prime Numbers
    #include<stdio.h>
    
    int main()
    {
        int n,i = 3, count, c;
    
        printf("\nEnter the number of prime numbers required :  ");
        scanf("%d", &n);
    
        if(n >= 1)
        {
            printf("\n\nFirst %d prime numbers are :  ", n);
            printf("2 ");
        }
    
        for(count = 2; count <= n; i++)  
        {
            // iteration to check c is prime or not
            for(c = 2; c < i; c++)
            {
                if(i%c == 0)
                    break;
            }
    
            if(c == i)  // c is prime
            {
                printf("%d ", i);
                count++;    
            }
    
        }
        return 0;
    }

62)find the Largest number among n input Numbers
    #include<stdio.h>
    
    int main()
    {
        int n,i;
        float c,big;
    
        printf("\n\nEnter the number of elements you wish to find the greatest element of: ");
        scanf("%d", &n);
        printf("\n\nEnter %d numbers :\n", n);
    
        printf("\n\n\tElement 1: ");
    
        scanf("%f", &big);
    
        for(i = 2; i <= n; i++)
        {
            printf("\n\t\t\tElement %d  : ", i);
            scanf("%f", &c);

            if(big < c)  
                big = c;    // update big to the larger value
        }
    
        printf("\n\n\nThe largest of the %d numbers is  %f ", n, big);
        return 0;
    }

63)find exponential without using pow() method
    #include<stdio.h>
    int main()
    {    
        int n, exp, exp1;
        long long int value = 1;
    
        printf("Enter the number and its exponential:\n\n");
        scanf("%d%d",&n, &exp);
    
        exp1 = exp;   
    
        while(exp-- > 0)
        {
            value *= n; // multiply n to itself exp times
        }
    
        printf("\n\n %d^%d = %lld\n\n", n, exp1, value);
        return 0;
    }

64)if input Number is int or float
    #include<stdio.h>
    
    #include<conio.h>
    #include<string.h>
    
    int main()
    {
        char number[10];
        int flag = 0;
        int length, i = 0;
    
        printf("\n\nEnter a number: ");
        scanf("%s", number);
    
        length = strlen(number);
            while(number[i++] != '\0')   
        {
            if(number[i] == '.')    
            {
                flag = 1;
                break;
            }
        }
    
        if(flag)
            printf("\n\n\n\tEntered Number is a Floating point Number\n\n");
        else
            printf("\n\n\n\tEntered Number is a integer Number\n\n");
    
        return 0;
    }
               
65)Multiplication Table
    #include<stdio.h>

    int main()
    {
        int n,i;
    
        printf("Enter an integer you need to print the table of: ");
        scanf("%d", &n);
        printf("\n\n\n");
    
        for(i = 1; i <= 10; i++)
        {
            printf("\n\t\t\t%d * %d   =   %d \n", n, i, n*i);
        }
    
        return 0;
    }

66)reverse of an Array
    #include<stdio.h>
    
    int main()
    {
    
        int c, d, n, a[100], b[100];
        printf("\n\nEnter number of elements in array :");
        scanf("%d", &n);
        printf("\n\nEnter %d elements\n", n);
    
        for(c = 0; c < n; c++)
            scanf("%d", &a[c]);
    
      
        for(c = n-1, d = 0; c >= 0; c--, d++)
            b[d] = a[c];
    
    
        for(c = 0; c < n; c++)
            a[c] = b[c];
    
        printf("\n\n Resultant array is: ");
        for(c = 0; c < n; c++)
            printf("%d", a[c]);
    
        return 0;
    }

67)insert an element in an Array
    #include<stdio.h>
    
    int main()
    {
        int array[100], position, c, n, value;
    
        printf("\n\nEnter number of elements in array:");
        scanf("%d", &n);
    
        printf("\n\nEnter %d elements\n", n);
        for(c = 0; c < n; c++)
            scanf("%d", &array[c]);
    
        printf("\n\nEnter the location where you want to insert new element:  ");
        scanf("%d", &position);
    
        printf("\n\nEnter the value to insert: ");
        scanf("%d", &value);
    
        for(c = n-1; c >= position-1; c--)
            array[c+1] = array[c];
    
        array[position - 1] = value;    
    
        printf("\n\nResultant array is: ");
     
        for(c = 0; c <= n; c++) 
            printf("%d  ", array[c]);
    
        return 0;
    }

68)Delete an Element from Array 
  #include<stdio.h>
  
  int main()
  {
  
      int array[100], position, c, n;
      printf("\n\nEnter number of elements in array:");
      scanf("%d", &n);
  
      printf("\n\nEnter %d elements\n", n);
      for(c = 0; c < n; c++)
          scanf("%d", &array[c]);
  
      printf("\n\nEnter the location where you want to delete element from:  ");
      scanf("%d", &position);
  
      if(position >= n+1)
          printf("\n\nDeletion not possible\n\n");
      else 
          for(c = position-1; c < n-1; c++)
          array[c] = array[c+1];
  
      printf("\n\nResultant array is: ");
    
      for(c = 0; c < n-1; c++) 
          printf("%d  ", array[c]);
  
      return 0;
  }

69)Delete an element from array based on value
    #include<stdio.h>
    
    int main()
    {
    
        int array[10], element, c, n, pos;
        
        int found = 0; 
        printf("\n\nEnter number of elements in array:");
        scanf("%d", &n);
    
        printf("\n\nEnter %d elements\n", n);
    
        for(c = 0; c < n; c++)
            scanf("%d", &array[c]);
    
        printf("\n\nThe input array is: ");
        for(c = 0; c < n; c++)
        printf("%d", array[c]);
    
        printf("\n\nEnter the element to be deleted: ");
        scanf("%d", &element);
    
        for(c = 0; c < n; c++)
        {
            if(array[c] == element)
            {
                found = 1;
                pos = c;
                break;  // terminate the loop
            }
        }
        if(found == 1) 
        {
            for(c = pos; c < n-1; c++)
                array[c] = array[c+1];
        }
        else
            printf("\n\nElement %d is not found in the array\n\n", element);
    
        printf("\n\nResultant array is: ");
    
        for(c = 0; c < n-1; c++) 
            printf("%d  ",array[c]);
    
        return 0;
    }

70)find Largest and Smallest Element in an Array
#include<stdio.h>

int main()
{
    int a[50], size, i, big, small;

    printf("\nEnter the size of the array: ");
    scanf("%d", &size);

    printf("\n\nEnter the %d elements of the array: \n\n", size);
    for(i = 0; i < size; i++)
    scanf("%d", &a[i]);

    big = a[0];
 
    for(i = 1; i < size; i++)
    {
        if(big < a[i])   
        {
            big = a[i]; 
        }
    }
    printf("\n\nThe largest element is: %d", big);

    small = a[0];   

    for(i = 1; i < size; i++)
    {
        if(small>a[i])   
        {
            small = a[i];   
        }
    }
    printf("\n\nThe smallest element is: %d", small);
    return 0;
}


71)find Sum of N input Numbers using Array
    #include<stdio.h>
    
    int main()
    {
        int n, sum = 0, c, array[100];
    
        printf("Enter the number of integers you want to add: ");
        scanf("%d", &n);
    
        printf("\n\nEnter %d integers \n\n", n);
    
        for(c = 0; c < n; c++)
        {
            scanf("%d", &array[c]);
            sum += array[c];    
        }
    
        printf("\n\nSum = %d\n\n", sum);
        return 0;
    }


72)Sort Array elements
    #include<stdio.h>
    #include<conio.h>
    
    void sorting(int *x, int y);
    
    void main()
    {
        int a[20], i, c, n;
        clrscr();
        printf("Enter number of elements you want to sort: ");
        scanf("%d", &n);
    
        for(i = 0; i < n; i++)
        scanf("%d", &a[i]);
    
        sorting(a, n);
    
        for(i = 0; i <n; i++)
        printf("%d\t", a[i]);
    
        getch();
    }
    
    void sorting(int *x, int y)
    {
        int i, j, temp;
        for(i = 1; i <= y-1; i++)
        {
            for(j = 0; j < y-i; j++)
            {
                if(*(x+j) > *(x+j+1))
                {
                    temp = *(x+j);
                    *(x+j) = *(x+j+1);
                    *(x+j+1) = temp;
                }
            }
        }
    }

73) Duplicate Element in an Array
    #include <stdio.h>
    
    int insertion(int arr[], int n  )
    {
        for(int i = 0 ; i < n ; i ++)
        {
            int value = arr[i];
            int prev = i ;//we can also take it as prev = i-1 but  i prefer prev= i
            
            while(prev>0 && arr[prev-1] > value)
            {
                arr[prev] = arr[prev - 1];
                prev--;
            }
            if(prev != 1)
            {
                arr[prev] = value;
            }
            
        }
        
    }
    int dup(int arr[] , int n )
    {
        
        for(int i =0 ; i < n ; i++)
        {
            if( arr[i] == arr[i-1] )
            {
                printf("\nduplicate element is %d\n" , arr[i]);
            }
        }
    }
    
    
    int main()
    {
        int n;
        printf("enter size of array : ");
        scanf("%d" , &n);
        
        int arr[n];
        for(int i = 0 ; i < n ; i++)
        {
            printf("array elements %d :" , i+1 );
            scanf("%d" , &arr[i]);
           
        }
        printf(" Array is : ");
        for(int i = 0 ; i < n ; i++)
        {
         
            printf(" %d " , arr[i]);
        }
        insertion(arr , n);
        dup(arr , n);
    }
    output :
    	enter size of array : 5
    	array elements 1 :5
    	array elements 2 :4
    	array elements 3 :7
    	array elements 4 :3
    	array elements 5 :7
    	Array is :  5  4  7  3  7 
    	duplicate element is 7

74)Remove duplicates from the sorted array
  #include <stdio.h>
  int remove_duplicate(int arr[], int n)
  {
  
    if (n == 0 || n == 1)
      return n;
  
    int temp[n];
  
    int j = 0;
    int i;
    for (i = 0; i < n - 1; i++)
      if (arr[i] != arr[i + 1])
        temp[j++] = arr[i];
    temp[j++] = arr[n - 1];
  
    for (i = 0; i < j; i++)
      arr[i] = temp[i];
  
    return j;
  }
  
  int main()
  {
    int n;
    scanf("%d", &n);
    int arr[n];
    int i;
    for (i = 0; i < n; i++)
    {
      scanf("%d", &arr[i]);
    }
    printf("\nArray Before Removing Duplicates: ");
    for (i = 0; i < n; i++)
      printf("%d ", arr[i]);
  
    n = remove_duplicate(arr, n);
  
    printf("\nArray After Removing Duplicates: ");
    for (i = 0; i < n; i++)
      printf("%d ", arr[i]);
  
    return 0;
  }

75)Remove duplicates from the unsorted array
#include <stdio.h>
int main()
{
  int n, count = 0;
  scanf("%d", &n);
  int arr[n], temp[n];
  for (int i = 0; i < n; i++)
  {
    scanf("%d", &arr[i]);
  }

  printf("\nArray Before Removing Duplicates: ");
  for (int i = 0; i < n; i++)
    printf("%d ", arr[i]);

  for (int i = 0; i < n; i++)
  {
    int j;
    for (j = 0; j < count; j++)
    {
      if (arr[i] == temp[j])
        break;
    }
    if (j == count)
    {
      temp[count] = arr[i];
      count++;
    }
  }

  printf("\nArray After  Removing Duplicates: ");
  for (int i = 0; i < count; i++)
    printf("%d ", temp[i]);

  return 0;
}

76)check whether a two dimensional array is a Sparse Matrix
     #include<stdio.h>
    
    int main()
    {
        int n, m, c, d, matrix[10][10];
        intcounter = 0;
        printf("\nEnter the number of rows and columns of the matrix \n\n");
        scanf("%d%d",&m,&n);
    
        printf("\nEnter the %d elements of the matrix \n\n", m*n);
        for(c = 0; c < m; c++)   
        {
            for(d = 0; d < n; d++)   
            {
                scanf("%d", &matrix[c][d]);
                if(matrix[c][d] == 0)
                counter++;  
            }
        }
    
        printf("\n\nThe entered matrix is: \n\n");
        for(c = 0; c < m; c++)  
        {
            for(d = 0; d < n; d++)   
            {
                printf("%d\t", matrix[c][d]);
            }
        printf("\n");
        }
    
        if(counter > (m*n)/2)
            printf("\n\nThe entered matrix is a sparse matrix\n\n");
        else
            printf("\n\nThe entered matrix is not a sparse matrix\n\n");
    
        return 0;
    }

77) matrix to spiral code
    
    #include <stdio.h>
    
    int spiral(int m , int n , int arr[m][n])
    {
        int left = 0 , right = n -1 , top = 0 , bottom = m-1 ;
        int dir = 0 ;//right = 0 , down = 1 , left = 2 , up = 3
        
        int res[m*n];
        int count = 0 ;
        
        while(left <= right && top <= bottom)
        {
            if(dir == 0 )
            {
                for(int i = left ; i <= right ; i ++)
                {
                    res[count++] = arr[top][i];
                }
                top++;
            }
            else if(dir == 1)
            {
                for(int i = top ; i <= bottom ; i++)
                {
                    res[count++]=arr[i][right];
                }
                right--;
            }
            else if(dir == 2)
            {
                for(int i = right ;  i >= left ; i--)
                {
                    res[count++]=arr[bottom][i];
                }
                bottom -- ;
            }
            else if(dir == 3)
            {
                for(int i = bottom ; i >= top ; i--)
                {
                    res[count++]=arr[i][left];
                }
                left++;
            }
            
            dir = (dir+1) % 4 ;
        }
        printf("The spiral form is : ");
        for(int i = 0 ; i <= m*n ; i++)
        {
            printf(" %d ", res[i]);
        }
        
    }
    int main()
    {   int m , n , i , j  ;
        printf("enter rows of matrix ");
        scanf("%d",&m );
        printf("enter column of matrix ");
        scanf("%d" , &n);
        int arr[m][n]  ;
        printf("enter elements in matrix\n");
        for(i = 0 ; i < m ; i++)
        {
            for(j = 0 ; j < n ; j++)
            {       
                    scanf("%d" , &arr[i][j]);
            }
        }
        printf("the matrix is : \n" );
        for(i = 0 ; i < m ; i++)
        {
            for(j = 0 ; j < n ; j++)
            {
                printf(" %d " , arr[i][j]);
            }
            printf("\n");
        }
        
        spiral(m , n , arr);
        
    }

78)strcpy() function
    #include<stdio.h>
    #include<string.h>    
    
    int main()
    {
        char mj[100];
        char aj[100];
        printf("\n\nstrcpy(destination, source): is a system defined method used to copy the source string into the destination.\n\n");
        printf("\n\nEnter the string: ");
        gets(aj);
        strcpy(mj, aj);
        printf("\n\nThe copied string is: %s\n\n", mj);
        return 0;
    }

79)copy with string function
    #include<stdio.h>
    
    void stringCopy(char[], char[]);    
    
    int main()
    {
        char aj[100], mj[100];
        printf("\n\nEnter 1st string: ");
        gets(aj);
        stringCopy(aj, mj); 
        printf("\n\nThe copied string is: %s\n\n", mj);
        return 0;
    }
    
    void stringCopy(char a[], char b[])
    {
        int i = 0;
        while(a[i] != '\0')
        {
            b[i] = a[i];
            i++;
        }
    
    
        b[i] =' \0';    
    }

80)strcmp() function
    #include<stdio.h>
    #include<string.h>   
    
    int main()
    {
        char aj1[100], aj2[100];
        int compare;
    
        printf("\n\nstrcmp(a,b) returns : 0 if both the strings are exactly same and -1 otherwise.\n\n\n");
        printf("\n\nstrcmp(a,b) is Case Sensitive.\n\n\n");
    
        printf("\n\nEnter 1st string: ");
        gets(aj1);
    
        printf("\n\nEnter 2nd string: ");
        gets(aj2);
    
        compare = strcmp(aj1, aj2);
        if(compare == 0)
            printf("\n\nBoth the strings are exactly same.\n\n");
        else
            printf("\n\nBoth the strings are different.\n");
    
        return 0;
    }
81) compare without string function
    #include<stdio.h>
    
    int stringCompare(char[], char[]); 
    int main()
    {
        char aj1[100], aj2[100];
        int compare;
    
        printf("\n\nEnter 1st string: ");
        scanf("%s", aj1);
    
        printf("\n\nEnter 2nd string: ");
        scanf("%s", aj2);
    
        compare = stringCompare(aj1, aj2);  
        
        if(compare == 1)
            printf("\n\nBoth the strings are exactly same.\n\n");
         else
            printf("\n\nBoth the strings are different.\n");
    
        return 0;
    }
    
    int stringCompare(char mj1[], char mj2[])  
    {
        int i = 0, flag = 0;
        while(mj1[i] != '\0' && mj2[i] != '\0') // until atleast one string ends
        {
       
            if(mj1[i] != mj2[i]) 
            {
                flag = 1;
                break;
            }
            i++;
        }
    
      
        if(flag == 0 && mj1[i] == '\0' && mj2[i] == '\0')
            return 1;
        else
            return 0;
    }


82)strrev() function
    #include<stdio.h>
    #include<string.h>

    int main()
    {
        char aj[1000];
        printf("\n\nstrrev(string): Function to reverse the string and storing in the same string.\n\n\n");
        printf("\n\nEnter the string: ");
        gets(aj);
       
        strrev(aj); 
        printf("\n\nReverse of entered string is: %s", aj);
        return 0;
    }
83) Whitespaces in a String
    #include<stdio.h>
    #include<string.h>
    
    int main()
    {
        char aj[1000], mj[1000];
        int i = 0, j = 0, len;
    
        printf("\n\nEnter the string: ");
        gets(aj);
    
        len = strlen(aj);   
    
        while(aj[i] != '\0')    
        {
            if(aj[i] != ' ')  
            {
              
                mj[j++] = aj[i];
            }
    
            i++;
        }
        mj[j] = '\0';
        printf("\n\nThe string after removing all the spaces is: %s", mj);
        return 0;
    }

84) strlen() function
    #include<stdio.h>
    #include<string.h>
    
    int main()
    {
        char a[100];
        int length;
        printf("Enter a string you wish to calculate the length of : ");
    
        gets(a);
    
        length = strlen(a);
        printf("The length of the input string is: %d", length);
        return 0;
    }
    
85)  string without strlen() function
    #include<stdio.h>
    int main()
    {
        char a[1000];
        int i = 0;
        printf("Enter the string: ");
        gets(a);
        
        for(i = 0; a[i] != '\0' ;i++);
        printf("The length of the input string is : %d", i);
        return 0;
    }

86) Count number of vowels in a String
    #include<stdio.h>
    
    int count_vowels(char []);
    int check_vowel(char);
    
    int main()
    {
        char aj[100];
        int mj;
    
        printf("\n\nEnter a string :   ");
        gets(aj);   
    
        mj = count_vowels(aj);  
        printf("\n\nNumber of vowels in string \'%s\' is: %d", aj, mj);
        return 0;
    }
    
 
    int count_vowels(char adi[]) 
    {
        int count = 0, c= 0, flag = 0;
        char d;
        do
        {

            d = adi[c]; 
         
            flag = check_vowel(d); 
    
            if(flag ==1)    
            {
                count++;   
            }
            c++;    
        }while(d != '\0');  
    
        return count;
    }
    
    int check_vowel(char ajj)
    {
        if(ajj >= 'A' && ajj <= 'Z')  
            ajj = ajj+'a' - 'A';    
    
        if(ajj == 'a' || ajj == 'e' || ajj == 'i' || ajj == 'o' || ajj == 'u')
            return 1;   
    
        return 0;   
    }

87)revese  string using recursion
    #include<stdio.h>
    #include<conio.h>
    
 
    char* reverse(char* str);
    
    void main()
    {
        int i, j, k;
        char str[100];
        char *rev;
        printf("Enter the string:\t");
        scanf("%s", str);
        printf("The original string is: %s\n", str);
        rev = reverse(str);
        printf("The reversed string is: %s\n", rev);
        getch();
    }
    
      char* reverse(char *str)
    {
        static int i = 0;
        static char rev[100];
        if(*str)
        {
            reverse(str+1);
            rev[i++] = *str;
        }
        return rev;
    }
88)traversal in linked list 
#include<stdio.h>
#include<stdlib.h>

struct node {

    int data ;
    struct node * next ;

};

void traversal(struct node * ptr){
    while(ptr != NULL){
    printf("element %d \n" , ptr -> data);
    ptr = ptr -> next ;
    }
}

int main ()
{
    struct node * head , * second , * third ;
    head = (struct node *)malloc(sizeof(struct node));
    second = (struct node *)malloc(sizeof(struct node));
    third = (struct node *)malloc(sizeof(struct node));

    head -> data = 5 ;
    head -> next = second ;

    second -> data = 18 ;
    second -> next = third ;

    third -> data = 30 ;
    third -> next = NULL;
    
    traversal(head);
}


89) insertion in linked list
  #include<stdio.h>
#include<stdlib.h>

struct node {

    int data ;
    struct node * next ;

};

void traversal(struct node * ptr){
    while(ptr != NULL){
    printf("element %d \n" , ptr -> data);
    ptr = ptr -> next ;
    }
}

struct node * InsertionAtSt( struct node * head , int data )
{
    struct node * ptr = (struct node *)malloc(sizeof(struct node ));
    ptr -> next = head ;
    ptr -> data = data ;
    return ptr ;
}

struct node * InsertionAtIndex( struct node * head , int data , int index)
{
    struct node * ptr =(struct node *)malloc(sizeof(struct node));
    struct node * p = head ;
    int i = 0 ;

    while( i != index -1)
    {
        p = p->next ;
        i++  ;
    }
    ptr -> data = data ;
    ptr -> next = p -> next ;
    p -> next = ptr ;
    return head;
}

struct node * InsertionAtEnd( struct node * head , int data )
{
    struct node * ptr = (struct node *)malloc(sizeof(struct node ));
    ptr -> data = data ;
    struct node * p = head ;
    while (p -> next != NULL)
    {
        p = p ->next  ;

    }
    p -> next = ptr ;
    ptr -> next =  NULL;
    return head ;

}

struct node * InsertionAfNode(struct node * head , struct node * prevNode , int data){
    struct node * ptr = (struct node *)malloc(sizeof(struct node));
    ptr -> data = data ;

    ptr -> next = prevNode -> next ;
    prevNode -> next = ptr ;

    return head ;
}


int main ()
{
    struct node * head , * second , * third , * fourth;
    head = (struct node *)malloc(sizeof(struct node));
    second = (struct node *)malloc(sizeof(struct node));
    third = (struct node *)malloc(sizeof(struct node));
    fourth = (struct node *)malloc(sizeof(struct node));

    head -> data = 5 ;
    head -> next = second ;

    second -> data = 18 ;
    second -> next = third ;

    third -> data = 30 ;
    third -> next = fourth;
    
    fourth -> data=  40 ;
    fourth -> next =  NULL ;
    
    printf("Before insertion \n");
    traversal(head);
    head = InsertionAfNode(head , second , 44);
    printf("after insetion \n");
    traversal(head);
    

}

90) deletion  in linked list
#include <stdio.h>
#include <stdlib.h>

struct node {

    int data ;
    struct node * next ;

};

int traversal(struct node * ptr ){

    while (ptr  != NULL )
    {
        printf("%d\n" , ptr->data);
        ptr = ptr -> next  ;
    }
}
struct node * deletionAtFirst(struct node * head ){
    struct node * ptr = head ;
    head = head -> next ;
    free(ptr);
    return head ;
}
struct node * deletionAtIndex(struct node * head , int index)
{
    struct node * p = head ;
    struct node * q = head -> next  ;
    for ( int i = 0 ; i = index - 1 ; i++)
    {
        p = p -> next ;
        q = q -> next ;
    }
    p -> next = q -> next ;
    free(q);
    return head ;
    
}

int main ()
{
    struct node * head , * second , * third , * fourth  ,  * fifth;
    head = (struct node *)malloc(sizeof(struct node ));
    second = (struct node *)malloc(sizeof(struct node ));
    third = (struct node *)malloc(sizeof(struct node ));
    fourth = (struct node *)malloc(sizeof(struct node ));
    fifth = (struct node *)malloc(sizeof(struct node ));

    head -> data = 12 ;
    head -> next = second ;

    second -> data = 34 ;
    second -> next = third ;

    third -> data = 49 ;
    third -> next = fourth ;

    fourth -> data = 88 ;
    fourth -> next = fifth;

    fifth -> data = 90 ;
    fifth -> next = NULL;
    
    //traversal(head);
    head = deletionAtIndex(head , 3);
    traversal(head);
}    
91) arrray stack 
#include <stdio.h>
#include <stdlib.h>
#define MAX 10

struct stack {
  
    int top ;
    int *arr ;
};

int is_full(struct stack * ptr )
{
    if(ptr->top >= MAX - 1)
    {
        return 1 ;
    }
    else
    {
        return 0 ;
    }
}

int is_empty(struct stack * ptr)
{
    if(ptr->top == -1)
    {
        return 1;
    }
    else
    {
        return 0 ;
    }
}

void push ( struct stack *ptr , int element)
{
    if (is_full(ptr))
    {
        printf("stack overflow\n");
    }
    else
    {
        ptr->top++;
        ptr->arr[ptr->top]=element ;
        
    }
}

int pop(struct stack * ptr )
{
    if (is_empty(ptr))
    {
        printf("stack underflow\n");
        return -1 ;
    }
    else
    {
        int val = ptr->arr[ptr->top];
        ptr->top-- ;
        return val ;
    }
    
}

int peek(struct stack * s  , int i )
{
    if(s->top-i+1 < 0)
    {
        printf("Not A Valid Postion");
        return -1 ;
    }
    else{

        return s->arr[s->top-i+1] ;

    }
}

int main() {
    
    struct stack * s = (struct stack *)malloc(sizeof(struct stack));
    
    s->top = -1 ; 
    s->arr = (int *)malloc((MAX) * sizeof(int)) ;
    

    push(s , 11);
    push(s , 12);
    push(s , 13);
    push(s , 10);
    
    
    

    //printf("poped out  element is %d\n" ,pop(s));
    //printf("poped out  element is %d\n" ,pop(s));
    //printf("poped out  element is %d\n" ,pop(s));

    for(int j = 1 ; j <= s->top +1 ; j++ )
    {
        printf("The positon of %d is %d\n" , j , peek(s ,  j));
    }
    return 0;
}
92)stack game
#include <stdio.h>
#include <stdlib.h>
#define MAX 25 

struct stack {
    int top ;
    int arr[52] ;

};

void push(struct stack * s , int val ){
    if(s->top >= MAX - 1)
    {
        printf("stack overflow !");
    }
    else 
    {
        s->top++;
        s->arr[s->top]=val;

    }
}

void pop(struct stack * s)
{
    if(s->top == -1)
    {
        printf("you won! ");
    }
    else{
        int val = s->arr[s->top];
        s->top--;
        printf("%d",val);
    }
}

int main ()
{
    struct stack * s = (struct stack *)malloc(sizeof(struct stack));
    //s->top = -1;
    //s->arr = (int *)malloc((MAX) * sizeof(int));
    int a , b;
    for(int i=0 ; i <= MAX ;  i++)
    {   
        printf("player 1 ");
        scanf("%d", &a);
        
        
        if(a == b )
        {
            while(s->top != -1)
            {
                pop(s);
            }
            return 0 ;
        }
        printf("player 2 ");
        scanf("%d" ,&b);

        if(a == b)
        {
            while(s->top != -1)
            {
                pop(s);
                
            }
            return 0 ;
        }
        
        else{
            push(s , a);
            push(s , b);
        }
    }


}

93)tree basic code 
  #include<stdio.h>
  #include<stdlib.h>
  
  struct node {
      int data ;
      struct node * left , * right ;
  
  };
  
  struct node * create (int data)
  {
      struct node * n =(struct node * )malloc (sizeof(struct node));
       n->data = data ;
       n->left = NULL ;
       n->right = NULL ;
  
       return n ;
  }
  
  struct node * preorder (struct node * root)
  {
      if(root != NULL)
      {
          printf("%d  " , root->data);
          preorder(root->left);
          preorder(root->right);
      }
  }
  
  struct node * postorder (struct node * root)
  {
      
      if (root != NULL)
      {
          postorder(root->left);
          postorder(root->right);
          printf("%d  " , root->data);
      }
  }
  
  struct node *  inorder(struct node * root)
  {
      
      if(root != NULL)
      {
          inorder(root->left);
          printf("%d  " , root->data);
          inorder(root->right);
      }
  }
  
  int main ()
  {
      struct node * p = create(4);
      struct node * p1 =create(5);
      struct node * p2 = create(6);
      struct node * p3 = create(7);
      struct node * p4 = create(8);
      struct node * p5 = create(9);
      struct node * p6 = create(10);
      struct node * p7 = create(11);
      
      /*      p
             / \
            p1   p2
            / \  /\
           p3 p4 p5 p6   */
  
      p->left = p1 ;
      p->right = p2 ;
      p1->left = p3 ;
      p1->right = p4 ;
      p2->left = p5 ;
      p2->right = p6 ;
      p6->left = p7 ;
      
      preorder(p);
      printf("\n");
      postorder(p);
      printf("\n");
      inorder(p);
  
  }
94)linear search 
    #include <stdio.h>
    
    int linearsearch(int arr[] , int element , int size){
        for(int i = 0 ; i <= size ; i++)
        {
            if(arr[i] == element)
            {
                return i ;
            }
    
        }
        
    
    }
    
    int binarysearch(int arr[] , int element , int size){
        int low , mid , high  ;
        low = 0 ;
        high = size-1 ;
        while(low <= high)
        {    
            mid = (low + high)/2 ;
        
            if(arr[mid] == element)
            {return mid ;}
            
            if(arr[mid < element])
            { low = mid +1 ; }
    
            else
            { high = mid -1 ;}
    
        }
        return -1 ;
    }
    
    int main()
    {
        int arr[10] = {2 ,3 ,5 , 6 ,77 ,88 ,89 , 100};
        int n;
        int size = sizeof(arr)/sizeof(int);
        printf("element you want to find ?");
        scanf("%d" , &n);
        int index = linearsearch( arr , n   , size);
        printf("element %d found at index %d\n" , n , index);
        int binary = binarysearch( arr , n , size) ;
        printf("element %d is found at index %d" ,n , binary );
    }

95)




       



   










          







        












 

 
        




      





















  









  















   
    




 












 



   


  









       














   

      



 









      














 






    








   








    








 








 




               







  





 






 





   









         



 






   
 




        







 




  




  









 


      
     







 
