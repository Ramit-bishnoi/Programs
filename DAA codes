
// Bubble sort


 #include<stdio.h>
 int main(){
     int i,j,temp,n,flag=0;
     printf("Enter the length of array:");
     scanf("%d",&n);
     int a[n];
     printf("Enter  integers: ");
     for(int i = 0; i < n; i++) {
         scanf("%d", &a[i]);
     }
     printf("original array:");
     for ( i = 0; i < n; i++)
     {
         printf("%d ",a[i]);
     }
     printf("\n");
    
    for ( i = 0; i < n-1; i++)
     {
         for ( j = 0; j < n-i-1; j++)
         {
             if (a[j]>a[j+1])
             {
                 temp=a[j];
                 a[j]=a[j+1];
                 a[j+1]=temp;
                 flag++;
             }  
         }
     }
     printf("number of tym swapping occured:%d\n",flag);
     printf("sorted array:");
     for ( i = 0; i < n; i++)
     {
         printf("%d ",a[i]);
     }
    
 }

output:-
        Enter the length of array:5
        Enter  integers: 2
        4
        5
        6
        1
        original array:2 4 5 6 1 
        number of tym swapping occured:4
        sorted array:1 2 4 5 6 


//selection sorting

#include<stdio.h>
int main(){
    int n,i,j,min,temp;
    printf("enter the size of array:");
    scanf("%d",&n);
    int arr[n];

    printf("Enter the elements of array:\n");
    for ( i = 0; i < n; i++)
    {
        scanf("%d",&arr[i]);
    }

    printf("original array:");
    for ( i = 0; i < n; i++)
    {
        printf("%d ",arr[i]);
    }
    printf("\n");
    
    for ( i = 0; i < n-1; i++)
    {
        min=i;
        for ( j = i+1 ; j < n; j++)
        {
            if (arr[j]<arr[min])
            {
                min=j;
            }
            
        }
        if (min!=i)
        {
            temp=arr[i];
            arr[i]=arr[min];
            arr[min]=temp;
        }
        
    }
    
    printf("sorted array:\n");
    for ( i = 0; i < n; i++)
    {
        printf("%d ",arr[i]);
    }

}

output :- 
        enter the size of array:5
        Enter the elements of array:
        1
        6
        3
        9
        4
        original array:1 6 3 9 4 
        sorted array:
        1 3 4 6 9 

\\insertion sort 

#include <math.h>
#include <stdio.h>

void insertionSort(int arr[], int n)
{
	int i, key, j;
	for (i = 1; i < n; i++)
	{
		key = arr[i];
		j = i - 1;

		while (j >= 0 && arr[j] > key)
		{
			arr[j + 1] = arr[j];
			j = j - 1;
		}
		arr[j + 1] = key;
	}
}

void printArray(int arr[], int n)
{
	int i;
	for (i = 0; i < n; i++)
		printf("%d ", arr[i]);
	printf("\n");
}

int main()
{
	int arr[] = {12, 11, 13, 5, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
	insertionSort(arr, n);
	printArray(arr, n);

	return 0;
}

output:- 
        5 6 11 12 13 

\\ merge sort 

#include<stdio.h>
#include<stdlib.h>

void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
  
    int L[n1], R[n2];
  
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSort(int arr[], int l, int r)
{
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
  
        merge(arr, l, m, r);
    }
}
void printArray(int A[], int size)
{
    int i;
    for (i = 0; i < size; i++)
        printf("%d ", A[i]);
    printf("\n");
}
int main()
{
    int arr[] = { 26, 36, 20, 5, 11, 70 };
    int arr_size = sizeof(arr) / sizeof(arr[0]);
  
    printf("Given array is \n");
    printArray(arr, arr_size);
  
    mergeSort(arr, 0, arr_size - 1);
  
    printf("\nSorted array is \n");
    printArray(arr, arr_size);
    return 0;
}

output :- 
        Given array is 
        26 36 20 5 11 70 
        
        Sorted array is 
        5 11 20 26 36 70 

matrix into spiral 
#include <stdio.h>

int spiral(int m , int n , int arr[m][n])
{
    int left = 0 , right = n -1 , top = 0 , bottom = m-1 ;
    int dir = 0 ;//right = 0 , down = 1 , left = 2 , up = 3
    
    int res[m*n];
    int count = 0 ;
    
    while(left <= right && top <= bottom)
    {
        if(dir == 0 )
        {
            for(int i = left ; i <= right ; i ++)
            {
                res[count++] = arr[top][i];
            }
            top++;
        }
        else if(dir == 1)
        {
            for(int i = top ; i <= bottom ; i++)
            {
                res[count++]=arr[i][right];
            }
            right--;
        }
        else if(dir == 2)
        {
            for(int i = right ;  i >= left ; i--)
            {
                res[count++]=arr[bottom][i];
            }
            bottom -- ;
        }
        else if(dir == 3)
        {
            for(int i = bottom ; i >= top ; i--)
            {
                res[count++]=arr[i][left];
            }
            left++;
        }
        
        dir = (dir+1) % 4 ;
    }
    printf("The spiral form is : ");
    for(int i = 0 ; i <= m*n ; i++)
    {
        printf(" %d ", res[i]);
    }
    
}
int main()
{   int m , n , i , j  ;
    printf("enter rows of matrix ");
    scanf("%d",&m );
    printf("enter column of matrix ");
    scanf("%d" , &n);
    int arr[m][n]  ;
    printf("enter elements in matrix\n");
    for(i = 0 ; i < m ; i++)
    {
        for(j = 0 ; j < n ; j++)
        {       
                scanf("%d" , &arr[i][j]);
        }
    }
    printf("the matrix is : \n" );
    for(i = 0 ; i < m ; i++)
    {
        for(j = 0 ; j < n ; j++)
        {
            printf(" %d " , arr[i][j]);
        }
        printf("\n");
    }
    
    spiral(m , n , arr);
    
}
