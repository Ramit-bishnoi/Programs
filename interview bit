//pick from both side and find max sum 
#include <stdio.h>


int main()
{
    int a = 0 , b = 0 , c = 0 , d = 0 ;
    int A[] = {3 , 4 , 5 , 7 , 2 , 7 , 9 , 4 , 5  , 8 };
    int n = 10 ;
    int B = 4 ;
    for(int i = 0 ;  i<B ; i++ )
    {
        a = a + A[i];
    }
    printf("a = %d\n" , a);
    
    
    for(int i = 0 ; i < B-1 ; i++)
    {
        b = b + A[i] ;
        
    }
    b = b+ A[n-1];
    printf("b = %d\n" , b);
    
    for(int i = n-1 ; i > n-1-B ; i--)
    {
        c = c + A[i];
    
    }
    printf("c = %d\n" , c);
    
    for(int i = n-1 ; i > n-B ; i--)
    {
        d = d + A[i];
    }
    d = d + A[0];
    printf("d = %d\n" , d );
    
    if(a < b)
    {
        if(b < c)
        {
            if(c < d)
            {
                printf("max sum = %d" , d);
            }
            else
            {
                printf("max sum = %d" ,c);
            }
            
        }
        else if (b < d)
        {
            printf("max sum = %d" , d);
        }
        else
        {
            printf("max sum = %d" , b);
        }
        
    }
    else if(a < c)
    {
        if(c < d)
        {
            printf("max sum = %d" , d);
        }
        else
        {
            printf("max sum = %d" , c);
        }    
        
    }
    else if(a < d)
    {
        printf("max sum = %d" , d);
    }
    else
    {
        printf("max sum = %d" , a);
    }
    
    
}

.
.
.
.
.
// min steps in infinte grid 
int coverPoints(int* A, int n1, int* B, int n2) {
    int n = n1 , a=0 , b=0 , count = 0, i=0;
    for(i = 0 ; i< n-1 ; i++)
    {
        a = abs(A[i] - A[i+1]);
        b = abs(B[i] - B[i+1]);
    if (a < b )
    {
        //printf("minn.  steps are %d\n",b);
        count= count + b;
    }                                      
    else
    {   
        //printf("minx steps are %d\n",a);
        count = count + a;

    }
    
    }
    //printf("min = %d" ,count );
    return count;

}
.
.
.
.
.
min lights to active
int solve(int* A, int n1, int B) {
    int left = 0 , count = 0;
    int nxtlight ;
    //int A[]={ 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0 };
    //int n1 = sizeof(A)/sizeof(A[0]);
    //int B = 12;
    int end = left + B-1 ;    
    while(left < n1 -1)
    {
        while(left < end )
        {
            if(A[end] ==1)
            {
                nxtlight = end ;
                break;
            }
            else 
            {
                end--;
            }
            
        }
        if(left == end)
        {
            return -1;
        }

        count++;
        left = nxtlight + B - 1 + 1;
        
    }
    //printf("min lights %d" , count);

    return count;
}
.
.
.
.
//add one (brute  force)
#include <stdio.h>

int main() {
    int A[]= {1 , 2 , 3 , 4 };
    int n = 4;
    int sum = 0 , i ;
    for(i = 0 ; i < n ; i++)
    {
        sum = sum*10 + A[i];
        
    }
    sum = sum + 1;
    int B[] = { };
    for(i = n-1 ; i > 0 ; i--)
    {
        B[i] = sum % 10 ;
        sum = sum / 10;
        
    }
    for(i = 0 ; i <= n1 ; i++)
    {
        if(B[i]==0)
        {
            count++;
        }
        else 
        {
            break;
        }

    }
    *len1 = n1 + 1 - count ;

    return B+count;
}
//add 1 in array 
int* plusOne(int* A, int n1, int *len1) {
    //int A[]= {1 , 2 , 3 , 4 };
    //int n = 4;
    int count = 0;
    int carry = 1, i;
    int* B = (int*) malloc ((n1+1) * sizeof(int));
         
    for(i = n1 ; i > 0 ; i--)
    {
        B[i] = (A[i-1]+carry)%10;
        carry = (A[i-1]+carry)/10;
    }
    B[0] = carry;
    for(i = 0 ; i <= n1 ; i++)
    {
        if(B[i]==0)
        {
            count++;
        }
        else 
        {
            break;
        }

    }
    *len1 = n1 + 1 - count ;

    return B+count;
}
.
.
.
.
.
.
.
// maximum absolute difference 
brute force 
#include <stdio.h>
#include <stdlib.h>

int main() {
    int A[] = {1 , 3 , -1 };
    int n = 3 ; 
    int x , prev = 0 ;
    for (int i = 1 ; i <=n ; i++)
    {
        for(int j = 1 ; j <= n ; j++)
        {
            x = abs(A[i-1] - A[j-1]) + abs(i-j);
            if(x > prev)
            {
                prev = x ;
            }
        }
    }
    printf("max = %d" , prev);
    return 0;
}
//with less time complexity
int maxArr(int* arr, int n1) {
    int max1 = INT_MIN, min1 = INT_MAX;
    int max2 = INT_MIN, min2 = INT_MAX;
    int i ;
    for ( i = 0; i < n1; i++) {
        max1 = (arr[i] + i) > max1 ? (arr[i] + i) : max1;
        min1 = (arr[i] + i) < min1 ? (arr[i] + i) : min1;
        max2 = (arr[i] - i) > max2 ? (arr[i] - i) : max2;
        min2 = (arr[i] - i) < min2 ? (arr[i] - i) : min2;
    }
    return (max1 - min1) > (max2 - min2) ? (max1 - min1) : (max2 - min2);

}
.
.
.
.
.
.
//partition 
int findNext (int targetSum, int *B, int size, int start, int direction) {
    int sum = 0;
    int i;
    if (direction == 1) {
        for (i=start; i<size; i++) {
            sum += B[i];
            if (sum == targetSum) {
                return i;
            }
        }
    } else {
        for (i=start; i>=0; i--) {
            sum += B[i];
            if (sum == targetSum) {
                return i;
            }
        }
    }
    return -1;
}
int solve(int n, int* B, int n2) {
    int p, q, r;
    int totalSum=0;
    int count=0;
    int i; 
    for (i=0; i<n; i++) {
        totalSum += B[i];
    }
    if (totalSum % 3 != 0) {
        return 0;
    }
    
    int targetSum = totalSum/3;
    p = findNext(targetSum, B, n, 0, 1);
    r = findNext(targetSum, B, n, n-1, -1);
    
    while (p<r) {
        q = findNext(targetSum, B, n, p+1, 1);
        if ((p==-1) || (r==-1) || (q==-1)) {
            break;
        }
        
        while ((q < r)  && (q!=-1)) {
            count ++;
            q = findNext(0, B, n, q+1, 1);
        }

        p = findNext(0, B, n, p+1, 1);
    }
    return count;
}
.
.
.
.
//perfect peak in array 
#include <stdio.h

int perfectPeak(int * A , int n1)
{
    int i , j ;
    int *B = (int *)malloc(() * sizeof(int));
    int *C = (int *)malloc(() * sizeof(int));
    
    
    for(i = 0 ; i < n1 ; i++)
    {
        if(B[i] < mid )
        {
            if(C[i] > mid)
            {
                return 1 ;
            }
            else
            {
                C[n1] = mid;
                mid = mid - 1 ;
            }
            
        }
        else
        {
            B[n1] = mid ;
            mid = mid + 1 ;
        }
    }
}

int main() {
    // Write C code here
    printf("Hello world");

    return 0;
}
